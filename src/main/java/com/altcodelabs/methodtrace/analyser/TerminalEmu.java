/*
 * Copyright 2019 Aniruddha Sarkar.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.altcodelabs.methodtrace.analyser;

import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * A Terminal Emulator.
 *
 * @author ani
 */
public class TerminalEmu extends javax.swing.JFrame {

    private final StringBuffer output;

    private final StringBuffer input;

    /**
     * Creates new form TerminalEmu.
     */
    public TerminalEmu() {
        initComponents();
        output = new StringBuffer();
        input = new StringBuffer();
    }

    /**
     * Adds to the output buffer for displaying.
     *
     * @param s The character to be added.
     */
    public void addToBuffer(char s) {
        output.append(s);
        updateUI();
    }

    OutputStream outputstream = null;

    /**
     * Renders the output buffer and the captured input and displays.
     */
    private void updateUI() {
        String temp = output.toString() + input.toString();
        jEditorPane1.setText(temp);
        jEditorPane1.scrollRectToVisible(new Rectangle(0, jEditorPane1.getBounds(null).height, 1, 1));
    }

    /**
     * Sets the output stream to which to write the user input.
     *
     * @param stream The output stream
     */
    public void setOutputStream(OutputStream stream) {
        outputstream = stream;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jEditorPane1.setEditable(false);
        jEditorPane1.setFocusable(false);
        jScrollPane2.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    /**
     * Captures input from keyboard.
     *
     * @param evt The KeyEvent
     */
    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ALT:
            case KeyEvent.VK_CONTROL:
            case KeyEvent.VK_SHIFT:
            case KeyEvent.VK_ALT_GRAPH:
            case KeyEvent.VK_WINDOWS:
            case KeyEvent.VK_META:
                break;
            case KeyEvent.VK_BACK_SPACE:
                if (input.length() > 0) {
                    input.deleteCharAt(input.length() - 1);
                }
                break;
            case KeyEvent.VK_ENTER:
                try {
                    //Writes to the output stream
                    String command = input.append("\n").toString();
                    output.append(command);
                    if (outputstream != null) {
                        outputstream.write(command.getBytes());
                        outputstream.flush();
                    }
                    if (input.length() > 0) {
                        input.delete(0, input.length());
                    }
                } catch (IOException ex) {
                    Logger.getLogger(TerminalEmu.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            default:
                input.append(evt.getKeyChar());
                break;
        }
        updateUI();
        //System.out.println("<<"+output+"||"+input+">>");
    }//GEN-LAST:event_formKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
