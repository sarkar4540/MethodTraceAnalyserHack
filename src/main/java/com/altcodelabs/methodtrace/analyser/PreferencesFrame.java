/*
 * Copyright 2019 Aniruddha Sarkar.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.altcodelabs.methodtrace.analyser;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * The window which can be used to edit the preferences of the application.
 *
 * @author ani
 */
public class PreferencesFrame extends javax.swing.JFrame {

    boolean cancellable;

    /**
     * Creates a new form and loads the existing values
     *
     * @param cancellable if the form is cancellable
     */
    public PreferencesFrame(boolean cancellable) {
        initComponents();
        this.cancellable = cancellable;
        pref = Preferences.getPreferences();
        if (!cancellable) {
            setDefaultCloseOperation(EXIT_ON_CLOSE);
            jButton2.setVisible(false);
            jButton1.setText("Continue");
        } else {
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }
        workSpaceEdit.setText(pref.config.getOrDefault("ws", (System.getProperty("user.home") + File.separator + "xtracer")));
        jreLocationEdit.setText(pref.config.getOrDefault("jre", System.getProperty("java.home")));
    }

    Preferences pref;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        workSpaceEdit = new javax.swing.JTextField();
        workspaceBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jreLocationEdit = new javax.swing.JTextField();
        jreBrowse = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Workspace Location");

        workspaceBrowse.setText("Browse");
        workspaceBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workspaceBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("IBM JRE Location");

        jreBrowse.setText("Browse");
        jreBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jreBrowseActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(workSpaceEdit)
                            .addComponent(jreLocationEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(workspaceBrowse)
                            .addComponent(jreBrowse)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(workSpaceEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(workspaceBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jreLocationEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jreBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Saves the provided preferences
     *
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String jre = jreLocationEdit.getText(), ws = workSpaceEdit.getText();
        if (!jre.trim().isEmpty() && !ws.trim().isEmpty()) {
            try {
                pref.config.put("jre", jre);
                pref.config.put("ws", ws);
                if (!Files.exists(Paths.get(ws))) {
                    Files.createDirectory(Paths.get(ws));
                }
                if (!pref.savePreferences()) {
                    JOptionPane.showMessageDialog(null, "Error saving preferences!");
                } else if (cancellable) {
                    this.dispose();
                } else {
                    MainFrame.main(null);
                    this.dispose();
                }
            } catch (IOException ex) {
                Logger.getLogger(PreferencesFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error creating directory: " + ws);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You must select the JVM Installation Directory and WorkSpace directory to continue!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Allows to select the workspace folder and shows the path
     *
     */
    private void workspaceBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workspaceBrowseActionPerformed

        File file = browseDirectory();
        if (file != null) {
            if (file.isDirectory()) {
                workSpaceEdit.setText(file.getAbsolutePath());
            } else {
                JOptionPane.showMessageDialog(null, "'" + file.getName() + "' is not a directory!");
            }
        }
    }//GEN-LAST:event_workspaceBrowseActionPerformed
    /**
     * Allows to select the IBM JRE directory, checks the selection and shows
     * the directory
     *
     */
    private void jreBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jreBrowseActionPerformed

        File file = browseDirectory();

        if (file != null) {
            File[] files = file.listFiles((File dir, String name) -> name.equals("jre"));
            if (files.length > 0) {
                file = files[0];
            }
            File[] files1 = file.listFiles((File dir, String name1) -> name1.equals("bin"));
            if (files1.length > 0) {
                File[] files2 = files1[0].listFiles((File dir, String name1) -> name1.equals("java"));
                if (files2.length > 0) {
                    jreLocationEdit.setText(file.getAbsolutePath());
                    return;
                }

            }
            JOptionPane.showMessageDialog(null, "Directory '" + file.getName() + "' does not contain a JRE Installation");
        }

    }//GEN-LAST:event_jreBrowseActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    JFileChooser jfc = new JFileChooser();

    /**
     * Allows to select a directory
     *
     * @return the selected directory, null if none selected
     */
    private File browseDirectory() {

        jfc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Directories";
            }
        });
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.showOpenDialog(null);

        return jfc.getSelectedFile();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jreBrowse;
    private javax.swing.JTextField jreLocationEdit;
    private javax.swing.JTextField workSpaceEdit;
    private javax.swing.JButton workspaceBrowse;
    // End of variables declaration//GEN-END:variables
}
