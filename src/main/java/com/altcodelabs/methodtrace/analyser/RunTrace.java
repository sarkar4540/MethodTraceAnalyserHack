/*
 * Copyright 2019 Aniruddha Sarkar.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.altcodelabs.methodtrace.analyser;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * The RunTrace window; used to run a java application with method tracing.
 * @author ani
 */
public class RunTrace extends javax.swing.JFrame {

    /**
     * Creates new form RunTrace
     */
    public RunTrace() {
        initComponents();
        classNames = new ArrayList();
        jFileChooser1 = new JFileChooser();
        jFileChooser2 = new JFileChooser();
        methodsPattern = Pattern.compile("((\\!?(((([A-z$_][A-z0-9$_]*\\/)*[A-z$_][A-z0-9$_]*\\*?)|\\*)|(([A-z$_][A-z0-9$_]*\\/)+\\*))\\.((([A-z$_][A-z0-9$_]*\\*?)|\\*)|<init>)(\\(\\))?))|(\\{((\\!?((([A-z$_][A-z0-9$_]*\\/)*[A-z$_][A-z0-9$_]*\\*?)|\\*)\\.((([A-z$_][A-z0-9$_]*\\*?)|\\*)|<init>)(\\(\\))?)|(([A-z$_][A-z0-9$_]*\\/)+\\*))(\\,((\\!?((([A-z$_][A-z0-9$_]*\\/)*[A-z$_][A-z0-9$_]*\\*?)|\\*)\\.((([A-z$_][A-z0-9$_]*\\*?)|\\*)|<init>)(\\(\\))?)|(([A-z$_][A-z0-9$_]*\\/)+\\*)))*\\})");
        jFileChooser1.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getAbsolutePath().toLowerCase().endsWith(".jar"); 
            }

            @Override
            public String getDescription() {
                return "Directory or JAR File"; 
            }
        });
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    }
    JFileChooser jFileChooser1, jFileChooser2;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Project Root Directory / JAR File");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Main Class");

        jLabel3.setText("Java VM Options");

        jLabel4.setText("Method Trace Options");

        jLabel5.setText("Methods:");

        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel6.setText("Trace File:");

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Continue");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField2)))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))))
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton3))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    boolean isJar = false;
    /**
     * Selects the compiled classes' root directory or a JAR file which is to be run.
     *  
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            if (file.isDirectory()) {
                classNames.clear();
                for (File file1 : file.listFiles()) {
                    scanForClassNames(file1, "");
                }

                isJar = false;
                jTextField1.setText(file.getAbsolutePath());
                jComboBox1.setEnabled(true);
                jComboBox1.setModel(new DefaultComboBoxModel<>(classNames.toArray(new String[classNames.size()])));
            } else if (file.getName().toLowerCase().endsWith(".jar")) {
                isJar = true;
                jTextField1.setText(file.getAbsolutePath());
                jComboBox1.setModel(new DefaultComboBoxModel<>());
                jComboBox1.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(this, "Selection is neither a directory, nor a JAR file.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField3KeyTyped
    /**
     * Checks the to be traced methods, using a RegEx and highlights if acceptable or not, using background color
     * of jTextField3.
     * @param evt The triggering event 
     */
    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusLost
        jTextField3.setBackground(isValidMethods(jTextField3.getText()) ? Color.GREEN.brighter() : Color.RED.brighter());
    }//GEN-LAST:event_jTextField3FocusLost
    /**
     * Removes the highlighting of jTextField3, for editing.
     * @param evt The triggering event 
     */
    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusGained
        jTextField3.setBackground(Color.WHITE);
    }//GEN-LAST:event_jTextField3FocusGained
    /**
     * Selects the binary output file for tracing.
     * @param evt The triggering event 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jFileChooser2.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser2.getSelectedFile();
            jTextField4.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Checks the options for running an starts the application with trace options enabled. 
     * Automatically imports the generated output file.
     * @param evt The triggering event 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Builds the options for Process to be started.
        ArrayList<String> commands = new ArrayList();
        commands.add(Preferences.getPreferences().config.get("jre") + File.separator + "bin" + File.separator + "java");
        String dir = jTextField1.getText();
        int classSel = jComboBox1.getSelectedIndex();
        String jvmOp = jTextField2.getText();
        String methods = jTextField3.getText();
        String output = jTextField4.getText();
        String targets = "";
        if (dir.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select a Project Directory or a JAR File!");
        } else if (!isJar && classSel < 0) {
            JOptionPane.showMessageDialog(this, "Select a class for execution!");
        } else if (output.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select an Output File!");
        } else if (!isValidMethods(methods)) {
            JOptionPane.showMessageDialog(this, "The method(s) you have opted for, are not entered properly. Please check again!");
        } else {
            //Everything ok and ready to proceed.
            File cur_dir;
            if (!jvmOp.trim().isEmpty()) {
                commands.add(jvmOp);
            }
            if (methods.matches("\\{.*\\}")) {
                for (String method : methods.substring(1, methods.length() - 2).split(",")) {
                    targets += ",trigger=method{" + method + ",jstacktrace}";
                }
            } else {
                targets += ",trigger=method{" + methods + ",jstacktrace}";
            }

            commands.add("-Xtrace:maximal=mt,output=" + output + ",methods=" + methods+targets);
            if (isJar) {
                commands.add("-jar");
                commands.add(dir);
                cur_dir = new File(System.getProperty("user.home"));
            } else {
                commands.add(jComboBox1.getSelectedItem() + "");
                cur_dir = new File(dir);
            }

            if (JOptionPane.showConfirmDialog(this, "You are about to run the following command:\n"
                    + commands.toString() + "\n"
                    + "\n... in the directory:\n"
                    + cur_dir.getAbsolutePath() + "\n"
                    + "Would you like to continue?") == JOptionPane.YES_OPTION) {
                try {
                    final TerminalEmu te = new TerminalEmu();
                    te.setVisible(true);
                    ProcessBuilder processBuilder = new ProcessBuilder(commands);
                    processBuilder.directory(cur_dir);
                    Process proc = processBuilder.start();
                    //Redirect Inputs and outputs to TerminalEmu instance
                    te.setOutputStream(proc.getOutputStream());
                    new Thread(() -> {
                        try (InputStream is = proc.getInputStream()) {
                            int b;
                            while ((b = is.read()) != -1) {
                                te.addToBuffer((char) b);
                            }
                            is.close();
                        } catch (IOException ex) {
                            Logger.getLogger(RunTrace.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }).start();
                    new Thread(() -> {
                        try (InputStream es = proc.getErrorStream()) {
                            int b;
                            while ((b = es.read()) != -1) {
                                te.addToBuffer((char) b);
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(RunTrace.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }).start();
                    new Thread(() -> {
                        try {
                            int res = proc.waitFor();
                            te.dispose();
                            //Import the binary output file into workspace
                            TraceManager.getTraceManager().importTrace(Arrays.asList(new File(output)), new File(output).getName());
//                            TraceManager.getTraceManager().importTrace(Arrays.asList(new File(output+".ex")), new File(output).getName()+".ex");

                            JOptionPane.showMessageDialog(this, "Execution completed with result code " + res + ". "
                                    + "The file(s) has been saved at:\n"
                                    + "Binary:" + output);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(RunTrace.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }).start();
                    dispose();
                } catch (IOException ex) {
                    Logger.getLogger(RunTrace.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    private ArrayList<String> classNames;
    Pattern methodsPattern;

    /**
     * Checks if the methods string is valid.
     * @param s the method string
     * @return true if s is valid
     */
    private boolean isValidMethods(String s) {
        return methodsPattern.matcher(s).matches();
    }

    /**
     * Recursively scans the folder for .class files and add the names to the classNames variable.
     * @param file The java class file or the folder containing these files.
     * @param s The base path which overrides the path
     */
    private void scanForClassNames(File file, String s) {
        String fileName = file.getName();
        if (file.isDirectory()) {
            for (File file1 : file.listFiles()) {
                scanForClassNames(file1, s + fileName + ".");
            }
        } else if (file.isFile() && fileName.toLowerCase().endsWith(".class")) {
            classNames.add(s + fileName.substring(0, fileName.length() - 6));
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
